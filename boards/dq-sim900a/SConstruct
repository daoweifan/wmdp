import os
import sys
import dddp_config

if os.getenv('DDDP_ROOT'):
    DDDP_ROOT = os.getenv('DDDP_ROOT')
else:
    DDDP_ROOT = os.path.normpath(os.getcwd() + '/../..')

sys.path = sys.path + [os.path.join(DDDP_ROOT, 'tools')]
from building import *

TARGET = 'dddp-stm32.' + dddp_config.TARGET_EXT

env = Environment(tools = ['mingw'],
	AS = dddp_config.AS, ASFLAGS = dddp_config.AFLAGS,
	CC = dddp_config.CC, CCFLAGS = dddp_config.CFLAGS,
	AR = dddp_config.AR, ARFLAGS = '-rc',
	LINK = dddp_config.LINK, LINKFLAGS = dddp_config.LFLAGS)
env.PrependENVPath('PATH', dddp_config.EXEC_PATH)

if dddp_config.PLATFORM == 'iar':
	env.Replace(CCCOM = ['$CC $CCFLAGS $CPPFLAGS $_CPPDEFFLAGS $_CPPINCFLAGS -o $TARGET $SOURCES'])
	env.Replace(ARFLAGS = [''])
	env.Replace(LINKCOM = ['$LINK $SOURCES $LINKFLAGS -o $TARGET --map ddddp.map'])

Export('DDDP_ROOT')
Export('dddp_config')

# prepare building environment
objs = PrepareBuilding(env, DDDP_ROOT, has_libcpu=False)


# make a building
DoBuilding(TARGET, objs)
